package de.trafficvalidator.rules;
unit CyclistArrowRuleUnit;

import de.trafficvalidator.model.Connection;
import de.trafficvalidator.model.Intersection;
import de.trafficvalidator.model.SignalGroup;
import de.trafficvalidator.model.ValidationResult;
import de.trafficvalidator.model.Lane;
import de.trafficvalidator.model.Direction;

import java.util.List;

dialect "java"

/**
 * Rules for validating if a green cyclist arrow sign (Verkehrszeichen 721) can be installed
 * at a specific right turn connection.
 * 
 * Based on VwV-StVo zu § 37, XI., 1. a-c:
 * a) No conflict-free left turn signals for opposing traffic
 * b) No green diagonal arrow for opposing left-turning traffic
 * c) No directional arrows in the traffic lights for the right-turn lane
 */


/**
 * Rule to check for conflict-free left turn signals from opposing traffic
 * VwV-StVo zu § 37, XI., 1. a)
 */
rule "CheckVollscheibeMitPfeil"
when
    // The cyclist's right turn connection
    $connection: /connections[isCyclistRightTurn()]
    $result: /results[connection == $connection]
    
    // Find any left turn from opposite direction using the connection's egress lane
    $leftTurn: Connection(
        isLeftTurn() == true, 
        this != $connection,
        getEgressLane() == $connection.getEgressLane()
    ) from $connection.getEgressLane().getIncomingConnections()
    
    // Check if it has a signal group that only controls left turns
    $signalGroup: SignalGroup(istLinksabbiegerVollscheibe() == true) from $leftTurn.getSignalGroup()
then
    $result.addFailure("VwV-StVo zu § 37, XI., 1. a) - dem entgegenkommenden Verkehr wird ein konfliktfreies Abbiegen nach links signalisiert (relevante Signalgruppe: " + $signalGroup.getName() + ")");
end

/**
 * Rule to check for diagonal green arrows for opposing left-turning traffic
 * VwV-StVo zu § 37, XI., 1. b)
 */
rule "CheckDiagonalGruen"
when
    // The cyclist's right turn connection
    $connection: /connections[isCyclistRightTurn()]
    $result: /results[connection == $connection]
    
    // Find any left turn from opposite direction using the connection's egress lane
    $leftTurn: Connection(
        isLeftTurn() == true,
        this != $connection,
        getEgressLane() == $connection.getEgressLane()
    ) from $connection.getEgressLane().getIncomingConnections()
    
    // Check if it has a diagonal green arrow signal group
    $signalGroup: SignalGroup(isDiagonalLeftTurn() == true) from $leftTurn.getSignalGroup()
then
    $result.addFailure("VwV-StVo zu § 37, XI., 1. b) - für den entgegenkommenden Linksabbieger wird der grüne Pfeil gemäß § 37 Abs. 2 Nr. 1 Satz 4 verwendet (relevante Signalgruppe: " + $signalGroup.getName() + ")");
end

/**
 * Rule to check for directional arrows in traffic lights
 * VwV-StVo zu § 37, XI., 1. c)
 */
rule "CheckRechtsabbiegehilfsignal"
when
    // The cyclist's right turn connection
    $connection: /connections[isCyclistRightTurn()]
    $result: /results[connection == $connection]
    
    $signalGroup: SignalGroup(
        isBicycleSignal() == false,
        isAdditionalRightTurnArrow() == true
    ) from $connection.getSignalGroup()
then
    $result.addFailure("VwV-StVo zu § 37, XI., 1. c) - Pfeile in den für den Rechtsabbieger gültigen Lichtzeichen schreiben die Fahrtrichtung vor (relevante Signalgruppe: " + $signalGroup.getName() + ")");
end